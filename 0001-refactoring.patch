From cdfaa1b90c3167f9adf6ad89697ad233247a7d77 Mon Sep 17 00:00:00 2001
From: Maxim Usikov <mu.usikov@gmail.com>
Date: Sun, 4 Jul 2021 14:11:23 +0300
Subject: [PATCH] refactoring

---
 index.html                              |  2 +
 js/changePictureScale.js                |  1 -
 js/clearForm.js                         |  1 -
 js/data.js                              | 95 +++++++++++++++++--------
 js/displayComments.js                   |  1 -
 js/editPictureForm.js                   |  1 -
 js/errorMessage.js                      |  1 -
 js/fullPhoto.js                         |  6 ++
 js/imposeEffectOnPicture.js             |  1 -
 js/interactionPicture.js                |  1 -
 js/main.js                              |  9 ++-
 js/miniatures.js                        | 20 ++++++
 js/openMiniPhoto.js                     |  1 -
 js/showMiniature.js                     | 29 --------
 js/slider.js                            |  1 -
 js/uploadNewPhoto.js                    |  1 -
 js/utils/check-string-length.js         |  5 --
 js/utils/get-random-positive-integer.js | 30 --------
 18 files changed, 102 insertions(+), 104 deletions(-)
 delete mode 100644 js/changePictureScale.js
 delete mode 100644 js/clearForm.js
 delete mode 100644 js/displayComments.js
 delete mode 100644 js/editPictureForm.js
 delete mode 100644 js/errorMessage.js
 create mode 100644 js/fullPhoto.js
 delete mode 100644 js/imposeEffectOnPicture.js
 delete mode 100644 js/interactionPicture.js
 create mode 100644 js/miniatures.js
 delete mode 100644 js/openMiniPhoto.js
 delete mode 100644 js/showMiniature.js
 delete mode 100644 js/slider.js
 delete mode 100644 js/uploadNewPhoto.js
 delete mode 100644 js/utils/check-string-length.js
 delete mode 100644 js/utils/get-random-positive-integer.js

diff --git a/index.html b/index.html
index ef7190f..2c7aad6 100644
--- a/index.html
+++ b/index.html
@@ -232,6 +232,8 @@
   </template>
 
 <script type="module" src="./js/main.js"></script>
+<!--
 <script type="module" src="./js/showFullPhoto.js"></script>
+-->
 </body>
 </html>
diff --git a/js/changePictureScale.js b/js/changePictureScale.js
deleted file mode 100644
index 76895ba..0000000
--- a/js/changePictureScale.js
+++ /dev/null
@@ -1 +0,0 @@
-//Функция изменения масштаба изображения.
diff --git a/js/clearForm.js b/js/clearForm.js
deleted file mode 100644
index f260973..0000000
--- a/js/clearForm.js
+++ /dev/null
@@ -1 +0,0 @@
-//функция очистки формы при успешной отправки запроса на сервер. Появление сообщения об успешной/неуспешной отправках.
diff --git a/js/data.js b/js/data.js
index 83d7a42..cbb484a 100644
--- a/js/data.js
+++ b/js/data.js
@@ -1,9 +1,5 @@
-import {randomInteger, checkLenght} from './utils.js';
-import {idReady} from './idReady.js';
-import {idNum} from './idNum.js';
-
-checkLenght();
-
+const PHOTOS_LIMIT = 25;
+const PHOTO_COMMENTS_LIMIT = 135;
 const NAMES = [
   'Саша',
   'Виолетта',
@@ -15,8 +11,7 @@ const NAMES = [
   'Ноэль',
   'Костя',
 ];
-
-const MESSAGETEXT = [
+const TEXTS = [
   'Всё отлично!',
   'В целом всё неплохо. Но не всё.',
   'Когда вы делаете фотографию, хорошо бы убирать палец из кадра. В конце концов это просто непрофессионально.',
@@ -24,8 +19,7 @@ const MESSAGETEXT = [
   'Я поскользнулся на банановой кожуре и уронил фотоаппарат на кота и у меня получилась фотография лучше.',
   'Лица у людей на фотке перекошены, как будто их избивают. Как можно было поймать такой неудачный момент?!',
 ];
-
-const description = [
+const DESCRIPTIONS = [
   'Выходные Кекса',
   'Сегодня на дессерт сметанка',
   'Вид из окна как всегда шикарный',
@@ -33,30 +27,75 @@ const description = [
   'Как же хочется поспать',
 ];
 
-const commentDesc = function() {
+function makeFakeComment() {
   return {
-    id: idReady(idNum),
-    avatar: `img/avatar-${randomInteger(0, 5)}.svg`,
-    message: MESSAGETEXT[randomInteger(0, MESSAGETEXT.length - 1)],
-    nameUser: NAMES[randomInteger(0, NAMES.length - 1)],
+    id: null,
+    avatar: null,
+    message: null,
+    name: null,
   };
-};
+}
 
-const comments = new Array(135).fill(null);
+function makeFakeComments() {
+  const comments = [];
 
-comments.forEach (commentDesc());
+  for (let i = 0; i < PHOTO_COMMENTS_LIMIT; i++) {
+    comments.push(makeFakeComment());
+  }
 
-const createPhotoDescription = function() {
+  return comments;
+}
+
+function makeFakePhoto() {
   return {
-    id: idNum[randomInteger(0, 5)],
-    url: `photos/${idReady(idNum)}.jpg`,
-    description: description[randomInteger(0, description.length - 1)],
-    likes: idNum[randomInteger(15, 200)],
-    comments: comments[randomInteger(0, MESSAGETEXT.length - 1)],
+    id: null,
+    url: `photos/1.jpg`,
+    description: null,
+    likes: 555,
+    comments: makeFakeComments(),
   };
-};
+}
+
+// https://up.htmlacademy.ru/javascript/23/check/tasks/1489759/8
+function fetchPhotos() {
+  const photos = [];
+
+  for (let i = 0; i < PHOTOS_LIMIT; i++) {
+    photos.push(makeFakePhoto());
+  }
+
+  return photos;
+}
 
-const createMiniature = () => new Array(5).fill(null).map(() => createPhotoDescription());
+export { fetchPhotos }
 
-export {createMiniature};
-export {comments};
+// import {randomInteger} from './utils.js';
+// import {idReady} from './idReady.js';
+// import {idNum} from './idNum.js';
+// const commentDesc = function() {
+//   return {
+//     id: idReady(idNum),
+//     avatar: `img/avatar-${randomInteger(0, 5)}.svg`,
+//     message: MESSAGETEXT[randomInteger(0, MESSAGETEXT.length - 1)],
+//     nameUser: NAMES[randomInteger(0, NAMES.length - 1)],
+//   };
+// };
+//
+// const comments = new Array(135).fill(null);
+//
+// comments.forEach (commentDesc());
+//
+// const createPhotoDescription = function() {
+//   return {
+//     id: idNum[randomInteger(0, 5)],
+//     url: `photos/${idReady(idNum)}.jpg`,
+//     description: description[randomInteger(0, description.length - 1)],
+//     likes: idNum[randomInteger(15, 200)],
+//     comments: comments[randomInteger(0, MESSAGETEXT.length - 1)],
+//   };
+// };
+//
+// const createMiniature = () => new Array(5).fill(null).map(() => createPhotoDescription());
+//
+// export {createMiniature};
+// export {comments};
diff --git a/js/displayComments.js b/js/displayComments.js
deleted file mode 100644
index 9bb72ff..0000000
--- a/js/displayComments.js
+++ /dev/null
@@ -1 +0,0 @@
-//функция, выводящая комментарии к изображению.
diff --git a/js/editPictureForm.js b/js/editPictureForm.js
deleted file mode 100644
index 31bbd19..0000000
--- a/js/editPictureForm.js
+++ /dev/null
@@ -1 +0,0 @@
-//Функция открытия/закрытия модального окна редактирования фотографии
diff --git a/js/errorMessage.js b/js/errorMessage.js
deleted file mode 100644
index 3399752..0000000
--- a/js/errorMessage.js
+++ /dev/null
@@ -1 +0,0 @@
-//функция выводящая сообщение об ошибке отправки изображения с сервера.
diff --git a/js/fullPhoto.js b/js/fullPhoto.js
new file mode 100644
index 0000000..90e3218
--- /dev/null
+++ b/js/fullPhoto.js
@@ -0,0 +1,6 @@
+function drawFullPhoto(photo) {
+  // ...
+  console.log('TODO: drawFullPhoto', photo);
+}
+
+export { drawFullPhoto };
diff --git a/js/imposeEffectOnPicture.js b/js/imposeEffectOnPicture.js
deleted file mode 100644
index 26eb8d2..0000000
--- a/js/imposeEffectOnPicture.js
+++ /dev/null
@@ -1 +0,0 @@
-//Функция наложения эффектов на фото
diff --git a/js/interactionPicture.js b/js/interactionPicture.js
deleted file mode 100644
index d97c553..0000000
--- a/js/interactionPicture.js
+++ /dev/null
@@ -1 +0,0 @@
-//Функция отвечающая за открытие и закрытие фото.
diff --git a/js/main.js b/js/main.js
index 70e5baf..e8985b7 100644
--- a/js/main.js
+++ b/js/main.js
@@ -1,2 +1,7 @@
-import '/js/data.js';
-import '/js/utils.js';
+import { fetchPhotos } from '/js/data.js';
+import { drawMiniatures } from '/js/miniatures.js';
+import { drawFullPhoto } from '/js/fullPhoto.js';
+
+const photos = fetchPhotos();
+drawMiniatures(photos);
+drawFullPhoto(photos[2]);
diff --git a/js/miniatures.js b/js/miniatures.js
new file mode 100644
index 0000000..cbdd4bd
--- /dev/null
+++ b/js/miniatures.js
@@ -0,0 +1,20 @@
+const pictures = document.querySelector('.pictures');
+const picture = document.querySelector('#picture').content;
+
+function drawMiniatures(photos) {
+  const fragment = document.createDocumentFragment();
+
+  photos.forEach((data) => {
+    const photo = picture.cloneNode(true);
+
+    photo.querySelector('.picture__img').setAttribute('src', data.url);
+    photo.querySelector('.picture__likes').textContent = data.likes;
+    photo.querySelector('.picture__comments').textContent = data.comments.length;
+
+    fragment.appendChild(photo);
+  });
+
+  pictures.appendChild(fragment);
+}
+
+export { drawMiniatures }
diff --git a/js/openMiniPhoto.js b/js/openMiniPhoto.js
deleted file mode 100644
index 9e13804..0000000
--- a/js/openMiniPhoto.js
+++ /dev/null
@@ -1 +0,0 @@
-//Открытие миниатюры.
diff --git a/js/showMiniature.js b/js/showMiniature.js
deleted file mode 100644
index 3c9f947..0000000
--- a/js/showMiniature.js
+++ /dev/null
@@ -1,29 +0,0 @@
-//Подгружает миниатюры пользователей.
-import { createMiniature } from './data.js';
-
-//блок куда вставляем шаблон
-const usersList = document.querySelector('.picture');
-//переменная для шаблона
-const usersPhotoTemplate = document.querySelector('#picture').content;
-
-//заводим переменную, которая хранит коллекцию объектов
-const usersData = createMiniature();
-//создаем фрагмент с данными пользователей
-const usersListFragment = document.createDocumentFragment();
-
-//Функция, которая генерирует нужные данные из объектов
-usersData.forEach(({url, likes, comments}) => {
-  //клонируем шаблон
-  const userData = usersPhotoTemplate.cloneNode(true);
-  //берем из объекта url
-  userData.querySelector('.picture__img').setAttribute('src', url);
-  //берем количество лайков
-  userData.querySelector('.picture__likes').textContent = likes;
-  //берем комментарий
-  userData.querySelector('.picture__comments').textContent = comments;
-  //все скдладываем в шаблон
-  usersListFragment.appendChild(userData);
-});
-
-//добавляем в блок разметки
-usersList.appendChild(usersListFragment);
diff --git a/js/slider.js b/js/slider.js
deleted file mode 100644
index 90377fd..0000000
--- a/js/slider.js
+++ /dev/null
@@ -1 +0,0 @@
-//функция взаимодействия со слайдером
diff --git a/js/uploadNewPhoto.js b/js/uploadNewPhoto.js
deleted file mode 100644
index 19ac1c5..0000000
--- a/js/uploadNewPhoto.js
+++ /dev/null
@@ -1 +0,0 @@
-//Функция загрузки нового изображения
diff --git a/js/utils/check-string-length.js b/js/utils/check-string-length.js
deleted file mode 100644
index 8faf72e..0000000
--- a/js/utils/check-string-length.js
+++ /dev/null
@@ -1,5 +0,0 @@
-function checkStringLength (string, length) {
-  return string.length <= length;
-}
-
-checkStringLength();
diff --git a/js/utils/get-random-positive-integer.js b/js/utils/get-random-positive-integer.js
deleted file mode 100644
index 18d1388..0000000
--- a/js/utils/get-random-positive-integer.js
+++ /dev/null
@@ -1,30 +0,0 @@
-// Функция взята из интернета и доработана
-// Источник - https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_random
-
-function getRandomPositiveInteger (aaa, bbb) {
-  // Чтобы не заставлять пользователя нашей функции помнить порядок аргументов,
-  // реализуем поддержку передачи минимального и максимального значения в любом порядке,
-  // а какое из них большее и меньшее вычислим с помощью Math.min и Math.max.
-
-  // После нам нужно убедиться, что пользователь не передал дробные значения,
-  // для этого на всякий пожарный случай нижнюю границу диапазона
-  // мы округляем к ближайшему большему целому с помощью Math.ceil,
-  // а верхнюю границу - к ближайшему меньшему целому с помощью Math.floor
-  const lower = Math.ceil(Math.min(Math.abs(aaa), Math.abs(bbb)));
-  const upper = Math.floor(Math.max(Math.abs(aaa), Math.abs(bbb)));
-  // Обратите внимание, чтобы учесть условие, что диапазон может быть [0, ∞),
-  // мы не ругаем пользователя за переданное отрицательное число,
-  // а просто берём его по модулю с помощью Math.abs
-
-  // Дальше используем Math.random() для получения случайного дробного числа в диапазоне [0, 1),
-  // которое домножаем на разницу между переданными числами плюс единица - это будет наша случайная дельта.
-  // После нужно сложить дельту с минимальным значением, чтобы получить итоговое случайное число.
-  const result = Math.random() * (upper - lower + 1) + lower;
-  // "Плюс единица", чтобы включить верхнюю границу диапазона в случайные числа
-
-  // И в конце с помощью метода Math.floor мы округляем полученный результат,
-  // потому что Math.random() генерирует только дробные числа и ноль.
-  return Math.floor(result);
-}
-
-getRandomPositiveInteger();
-- 
2.31.1

